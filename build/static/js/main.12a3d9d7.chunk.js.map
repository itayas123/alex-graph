{"version":3,"sources":["components/Table.tsx","components/DataTable/DataTable.tsx","services/GoogleSheets.service.ts","components/Loader/Loader.tsx","components/TotalChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SheetsTitles","DataTable","props","data","columns","className","defaultSortMethod","a","b","includes","Date","parse","parseFloat","replace","defaultFilterMethod","filter","row","id","toString","toLowerCase","value","SheetsColumns","Table","googleSheetsService","sheetName","title","isLoading","setIsLoading","isHorizontal","offset","useState","setData","setColumns","useEffect","getHorizontalRowsandColumnByTitle","sheetColumns","sheetData","getCellsByTitle","getRowsByTitle","forEach","index","column","columnIndex","Header","getCellByTitleAndIndex","initSheets","showPagination","defaultPageSize","length","GoogleSheetsService","_doc","this","GoogleSpreadsheet","creds","require","useServiceAccountAuth","loadInfo","console","error","log","sheetTitle","sheet","sheetsByTitle","getRows","limit","undefined","rowIndex","cellIndex","cellStats","loaded","Error","getCell","formattedValue","cells","loadCells","columnsCount","cell","accessor","unshift","unvalidKey","Object","keys","find","key","Loader","color","type","EXIT_DATE","getValueAsCurrency","minimumFractionDigits","Intl","NumberFormat","style","currency","format","options","plugins","legend","display","tooltip","callbacks","label","context","dataset","parsed","y","scales","yAxes","ticks","callback","ticketValue","TotalChart","CLOSE","rows","OPEN","startDateColumn","startDateArray","split","startDate","dates","Array","from","Set","map","sort","getDate","profits","date","reduce","PnL","chartData","labels","datasets","fill","backgroundColor","borderColor","pointRadius","initData","App","loadingCount","setLoadingCount","init","count","TOTAL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12a3d9d7.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Column } from \"react-table-6\";\r\nimport { GoogleSpreadsheetRow } from \"google-spreadsheet\";\r\nimport GoogleSheetsService from \"../services/GoogleSheets.service\";\r\nimport DataTable from \"./DataTable/DataTable\";\r\n\r\nexport enum SheetsTitles {\r\n  TOTAL = \"Таблица 1\",\r\n  OPEN = \"Таблица 2\",\r\n  CLOSE = \"Таблица 3\",\r\n}\r\n\r\nexport const SheetsColumns = {\r\n  \"Таблица 1\": 2,\r\n  \"Таблица 2\": 7,\r\n  \"Таблица 3\": 7,\r\n};\r\n\r\nexport interface TableProps {\r\n  googleSheetsService: GoogleSheetsService;\r\n  sheetName: SheetsTitles;\r\n  title: string;\r\n  isLoading: boolean;\r\n  setIsLoading: () => any;\r\n  isHorizontal?: boolean;\r\n  offset?: number;\r\n}\r\n\r\nconst Table: React.SFC<TableProps> = ({\r\n  googleSheetsService,\r\n  sheetName,\r\n  title,\r\n  isLoading,\r\n  setIsLoading,\r\n  isHorizontal,\r\n  offset,\r\n}: TableProps) => {\r\n  const [data, setData] = useState<GoogleSpreadsheetRow[]>([]);\r\n  const [columns, setColumns] = useState<Column[]>([]);\r\n\r\n  useEffect(() => {\r\n    const initSheets = async () => {\r\n      if (isHorizontal) {\r\n        const {\r\n          sheetColumns,\r\n          sheetData,\r\n        } = await googleSheetsService.getHorizontalRowsandColumnByTitle(\r\n          sheetName\r\n        );\r\n        setColumns(sheetColumns);\r\n        setData(sheetData);\r\n      } else {\r\n        const sheetColumns = await googleSheetsService.getCellsByTitle(\r\n          sheetName,\r\n          offset\r\n        );\r\n        const sheetData = await googleSheetsService.getRowsByTitle(\r\n          sheetName,\r\n          offset\r\n        );\r\n        if (offset) {\r\n          sheetData.forEach((data, index) => {\r\n            sheetColumns.forEach((column, columnIndex) => {\r\n              data[column.Header] = googleSheetsService.getCellByTitleAndIndex(\r\n                sheetName,\r\n                offset + index + 1,\r\n                columnIndex\r\n              );\r\n            });\r\n          });\r\n        }\r\n        setColumns(sheetColumns);\r\n        setData(sheetData);\r\n      }\r\n\r\n      setIsLoading();\r\n    };\r\n\r\n    initSheets();\r\n  }, [googleSheetsService, sheetName, isHorizontal, offset]);\r\n\r\n  return isLoading ? (\r\n    <></>\r\n  ) : (\r\n    <div>\r\n      {title && <h3>{title}</h3>}\r\n      <DataTable\r\n        columns={columns as any}\r\n        data={data}\r\n        showPagination={false}\r\n        defaultPageSize={data.length}\r\n        className={isHorizontal ? \"is-horizontal\" : \"\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport ReactTable, { TableProps } from \"react-table-6\";\r\nimport \"react-table-6/react-table.css\";\r\nimport \"./dataTable.css\";\r\n\r\nconst DataTable = (props: Partial<TableProps<any>>) => {\r\n  const { data, columns, className } = props;\r\n  return (\r\n    <ReactTable\r\n      data={data}\r\n      columns={columns}\r\n      defaultSortMethod={(a: string, b: string) => {\r\n        if (!a || !b) {\r\n          return -1;\r\n        }\r\n        if (a === b) {\r\n          return 0;\r\n        }\r\n        const aValue = a.includes(\"/\")\r\n          ? Date.parse(a)\r\n          : parseFloat(a.replace(/,/g, \"\")) || a;\r\n        const bValue = b.includes(\"/\")\r\n          ? Date.parse(b)\r\n          : parseFloat(b.replace(/,/g, \"\")) || b;\r\n        return aValue > bValue ? 1 : -1;\r\n      }}\r\n      defaultFilterMethod={(filter, row) =>\r\n        row[filter.id]\r\n          ? row[filter.id]\r\n              .toString()\r\n              .toLowerCase()\r\n              .includes(filter.value.toLowerCase())\r\n          : false\r\n      }\r\n      {...props}\r\n      className={`-striped -highlight ${className}`}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","import { GoogleSpreadsheet, GoogleSpreadsheetRow } from \"google-spreadsheet\";\r\nimport { Column } from \"react-table-6\";\r\nimport { SheetsColumns, SheetsTitles } from \"../components/Table\";\r\n\r\nclass GoogleSheetsService {\r\n  private _doc: GoogleSpreadsheet;\r\n\r\n  constructor() {\r\n    this._doc = new GoogleSpreadsheet(\r\n      // \"1tXEsG0qk4boX7j0V7U_Dun_v5uXDsk8iOfpK2xQagxI\" ||\r\n      \"1LbIprnwWJTQYWJy8uh7E1rr1MOaSbuiHPYzjL9h0eEQ\"\r\n    );\r\n  }\r\n\r\n  async init() {\r\n    const creds = require(\"../config/alex-graph-726c372311a6.json\");\r\n    try {\r\n      await this._doc.useServiceAccountAuth(creds);\r\n      await this._doc.loadInfo();\r\n    } catch (err) {\r\n      console.error(\"Failed to connect google sheets: \", err);\r\n    }\r\n    console.log(\"Success to connect google sheets and load info\");\r\n  }\r\n\r\n  async getRowsByTitle(\r\n    sheetTitle: SheetsTitles,\r\n    offset?: number\r\n  ): Promise<GoogleSpreadsheetRow[]> {\r\n    try {\r\n      const sheet = this._doc.sheetsByTitle[sheetTitle];\r\n      return await sheet.getRows(\r\n        offset ? { offset, limit: 99999999 } : undefined\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getCellByTitleAndIndex(\r\n    sheetTitle: SheetsTitles,\r\n    rowIndex: number,\r\n    cellIndex: number\r\n  ) {\r\n    const sheet = this._doc.sheetsByTitle[sheetTitle];\r\n    if (!sheet.cellStats.loaded) {\r\n      throw new Error(\"not loaded\");\r\n    }\r\n    return sheet.getCell(rowIndex, cellIndex).formattedValue;\r\n  }\r\n\r\n  async getCellsByTitle(\r\n    sheetTitle: SheetsTitles,\r\n    rowIndex: number = 0\r\n  ): Promise<{ Header: string; accessor: string }[]> {\r\n    try {\r\n      const cells: { Header: string; accessor: string }[] = [];\r\n      const sheet = this._doc.sheetsByTitle[sheetTitle];\r\n      console.log(sheet.cellStats);\r\n      if (!sheet.cellStats.loaded) {\r\n        await sheet.loadCells();\r\n      }\r\n      const columnsCount: number = SheetsColumns[sheetTitle];\r\n      for (let cellIndex = 0; cellIndex < columnsCount; cellIndex++) {\r\n        const cell = sheet.getCell(rowIndex, cellIndex);\r\n        cells[cellIndex] = {\r\n          Header: cell.formattedValue,\r\n          accessor: cell.formattedValue,\r\n        };\r\n      }\r\n      return cells;\r\n    } catch (err) {\r\n      console.error(err);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getHorizontalRowsandColumnByTitle(\r\n    sheetTitle: SheetsTitles,\r\n    offset?: number\r\n  ): Promise<{\r\n    sheetColumns: Column<any>[];\r\n    sheetData: any[];\r\n  }> {\r\n    const sheetColumns: Column[] = await this.getCellsByTitle(\r\n      sheetTitle,\r\n      offset\r\n    );\r\n    const sheetData: any[] = await this.getRowsByTitle(sheetTitle);\r\n    sheetData.unshift({\r\n      [sheetColumns[0].accessor?.toString() || \"\"]: sheetColumns[0].Header,\r\n      [sheetColumns[1].accessor?.toString() || \"\"]: sheetColumns[1].Header,\r\n    });\r\n    sheetColumns.forEach((column) => {\r\n      if (parseFloat(column.accessor?.toString().replace(/,/g, \"\") || \"\")) {\r\n        column.accessor = \"some accessor\";\r\n      }\r\n    });\r\n    sheetData.forEach((data) => {\r\n      const unvalidKey = Object.keys(data).find((key) =>\r\n        parseFloat(key.replace(/,/g, \"\"))\r\n      );\r\n      if (unvalidKey) {\r\n        data[\"some accessor\"] = data[unvalidKey];\r\n      }\r\n    });\r\n    return { sheetColumns, sheetData };\r\n  }\r\n}\r\n\r\nexport default GoogleSheetsService;\r\n","import ReactLoading, { LoadingType } from \"react-loading\";\r\nimport React from \"react\";\r\n\r\nexport interface LoaderProps {\r\n  color?: string;\r\n  type?: LoadingType;\r\n}\r\n\r\nconst Loader: React.SFC<LoaderProps> = ({\r\n  color = \"rgb(55, 179, 115)\",\r\n  type = \"spinningBubbles\",\r\n}: LoaderProps) => {\r\n  return <ReactLoading className=\"loader\" color={color} type={type} />;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { ChartData, ChartType, ChartOptions } from \"chart.js\";\r\nimport GoogleSheetsService from \"../services/GoogleSheets.service\";\r\nimport { SheetsTitles } from \"./Table\";\r\n\r\nexport interface ChartProps {\r\n  googleSheetsService: GoogleSheetsService;\r\n  isLoading: boolean;\r\n  setIsLoading: () => any;\r\n  type?: ChartType;\r\n}\r\nconst EXIT_DATE = \"Exit Date\";\r\n\r\nconst getValueAsCurrency = (value: any, minimumFractionDigits: number = 2) =>\r\n  new Intl.NumberFormat(\"en-us\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n    minimumFractionDigits,\r\n  }).format(value);\r\n\r\nconst options: ChartOptions = {\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    tooltip: {\r\n      callbacks: {\r\n        label: function (context: any) {\r\n          let label = context.dataset.label || \"\";\r\n\r\n          if (label) {\r\n            label += \": \";\r\n          }\r\n          if (context.parsed.y !== null) {\r\n            label += getValueAsCurrency(context.parsed.y);\r\n          }\r\n          return label;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    yAxes: {\r\n      ticks: {\r\n        // Include a dollar sign in the ticks\r\n        callback: (ticketValue) => getValueAsCurrency(ticketValue, 0),\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst TotalChart: React.SFC<ChartProps> = ({\r\n  googleSheetsService,\r\n  isLoading,\r\n  setIsLoading,\r\n  type = \"line\",\r\n}: ChartProps) => {\r\n  const [data, setData] = useState<ChartData>();\r\n  useEffect(() => {\r\n    const initData = async () => {\r\n      const rows = await googleSheetsService.getRowsByTitle(SheetsTitles.CLOSE);\r\n      const startDateColumn = (\r\n        await googleSheetsService.getCellsByTitle(SheetsTitles.OPEN)\r\n      )[0];\r\n      const startDateArray = startDateColumn.Header.split(\" \");\r\n      const startDate = startDateArray[startDateArray.length - 1];\r\n\r\n      const dates: Date[] = Array.from(\r\n        new Set(rows.map((row) => row[EXIT_DATE]))\r\n      ).sort((a, b) => new Date(a).getDate() - new Date(b).getDate());\r\n\r\n      const profits: number[] = [];\r\n      dates.forEach((date, index) => {\r\n        profits[index] = rows\r\n          .filter((row) => {\r\n            return new Date(row[EXIT_DATE]) <= new Date(date);\r\n          })\r\n          .reduce((a, b) => {\r\n            const PnL = b[\"$ PnL\"];\r\n            return a + parseFloat(PnL.replace(/,/g, \"\"));\r\n          }, 0);\r\n      });\r\n\r\n      const chartData: ChartData = {\r\n        labels: [startDate, ...dates],\r\n        datasets: [\r\n          {\r\n            label: \"Portfolio Performance\",\r\n            data: [0, ...profits],\r\n            fill: false,\r\n            backgroundColor: \"rgb(55, 179, 115)\",\r\n            borderColor: \"rgba(55, 179, 115, 0.2)\",\r\n          },\r\n          {\r\n            type: \"line\",\r\n            label: \"Line Dataset\",\r\n            data: Array.from({ length: dates.length + 1 }, () => 0),\r\n            pointRadius: 0,\r\n            // borderColor: \"rgba(73,166,184,255)\",\r\n            // borderDash: [5],\r\n          },\r\n        ],\r\n      };\r\n      setData(chartData);\r\n      setIsLoading();\r\n    };\r\n\r\n    initData();\r\n  }, [googleSheetsService]);\r\n\r\n  return (\r\n    <div className=\"chart-div\">\r\n      {isLoading ? (\r\n        <></>\r\n      ) : (\r\n        <div>\r\n          <h3>Portfolio Performance</h3>\r\n          <Line data={data} options={options} type={type} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Table, { SheetsTitles } from \"./components/Table\";\r\nimport GoogleSheetsService from \"./services/GoogleSheets.service\";\r\nimport Loader from \"./components/Loader/Loader\";\r\nimport TotalChart from \"./components/TotalChart\";\r\n\r\nconst googleSheetsService: GoogleSheetsService = new GoogleSheetsService();\r\n\r\nfunction App() {\r\n  const [loadingCount, setLoadingCount] = useState(0);\r\n  const isLoading = loadingCount < 5;\r\n\r\n  useEffect(() => {\r\n    const initSheets = async () => {\r\n      try {\r\n        await googleSheetsService.init();\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n      setLoadingCount((count) => count + 1);\r\n    };\r\n\r\n    initSheets();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isLoading && <Loader />}\r\n      {loadingCount > 0 ? (\r\n        <div>\r\n          <div className=\"total-div\">\r\n            <Table\r\n              title=\"Strategy Performance\"\r\n              isLoading={isLoading}\r\n              setIsLoading={() => setLoadingCount((count) => count + 1)}\r\n              googleSheetsService={googleSheetsService}\r\n              sheetName={SheetsTitles.TOTAL}\r\n              isHorizontal\r\n            />\r\n            <TotalChart\r\n              googleSheetsService={googleSheetsService}\r\n              isLoading={loadingCount < 4}\r\n              setIsLoading={() => setLoadingCount((count) => count + 1)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Table\r\n              title=\"Open Positions\"\r\n              isLoading={isLoading}\r\n              setIsLoading={() => setLoadingCount((count) => count + 1)}\r\n              googleSheetsService={googleSheetsService}\r\n              sheetName={SheetsTitles.OPEN}\r\n              offset={3}\r\n            />\r\n            <br />\r\n            <Table\r\n              title=\"Close Positions\"\r\n              isLoading={isLoading}\r\n              setIsLoading={() => setLoadingCount((count) => count + 1)}\r\n              googleSheetsService={googleSheetsService}\r\n              sheetName={SheetsTitles.CLOSE}\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}